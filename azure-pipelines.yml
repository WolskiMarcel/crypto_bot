trigger:
  branches:
    include:
      - main

parameters:
  - name: buildImage
    type: boolean
    default: true
    displayName: "Build Docker Image"
  - name: operation
    type: string
    default: "Reinstall"
    displayName: "Operation"
    values:
      - Install
      - Uninstall
      - Reinstall

pool:
  name: 'vm-agent'

variables:
- group: credentials  # Variable group containing registryName, d_token, acrUsername, acrPassword, etc.
- name: repo_github
  value: 'https://github.com/WolskiMarcel/crypto_bot'

stages:
- stage: Test
  displayName: "Testing and Linting"
  jobs:
    - job: Testing
      displayName: "Run tests and code style checks"
      steps:
        - checkout: self
        - script: |
            python3 -m venv venv
            source venv/bin/activate
            python -m pip install --upgrade pip
            pip install -r src/requirements.txt
          displayName: "Install Dependencies"
        - script: |
            source venv/bin/activate
            black --check src
          displayName: "Run Black Code Style Check"
        - script: |
            source venv/bin/activate
            pytest tests
          displayName: "Run Pytest"

- stage: Build
  displayName: "Building Docker Image"
  dependsOn: Test
  condition: and(succeeded(), eq('${{ parameters.buildImage }}', true))
  jobs:
    - job: BuildJob
      displayName: "Build Docker Image and Push to ACR"
      steps:
        - checkout: self
        - script: |
            # Convert image name to lowercase
            IMAGE_TAG=$(echo "$(registryName)/$(Build.Repository.Name)" | tr '[:upper:]' '[:lower:]')
            echo "Using image tag: ${IMAGE_TAG}:latest"
            docker build -t ${IMAGE_TAG}:latest -f src/Dockerfile src/
          displayName: "Build Docker Image"
        - script: |
            docker login $(registryName) -u $(acrUsername) -p $(acrPassword)
          displayName: "Docker Registry Login"
        - script: |
            IMAGE_TAG=$(echo "$(registryName)/$(Build.Repository.Name)" | tr '[:upper:]' '[:lower:]')
            echo "Pushing image: ${IMAGE_TAG}:latest"
            docker push ${IMAGE_TAG}:latest
          displayName: "Push Docker Image"

- stage: Deploy
  displayName: "Deployment"
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: DeployJob
      displayName: "Deploy Application"
      steps:
        - script: |
            # Convert image name to lowercase
            IMAGE_TAG=$(echo "$(registryName)/$(Build.Repository.Name)" | tr '[:upper:]' '[:lower:]')
            echo "Using image tag: ${IMAGE_TAG}:latest"
            echo "Selected operation: ${{ parameters.operation }}"
            if [ "${{ parameters.operation }}" = "Install" ]; then
              echo "Installing – starting container..."
              docker run -d -e D_TOKEN="$(d_token)" -p 32025:32025 ${IMAGE_TAG}:latest
            elif [ "${{ parameters.operation }}" = "Uninstall" ]; then
              echo "Uninstall – stopping and removing container..."
              docker stop myapp || true && docker rm myapp || true
            else
              echo "Reinstall – stopping, removing, and starting a new container..."
              docker stop myapp || true && docker rm myapp || true
              docker run -d --name myapp -e D_TOKEN="$(d_token)" -p 32025:32025 ${IMAGE_TAG}:latest
            fi
          displayName: "Deploy Application"
